summary(luxnb)
plot(lux)
plot(luxnb, coords = coordinates(lux), add=T, col=2, lwd=2)
luxnb <- poly2nb(lux, queen = F) # there is more than one way to define neighbors
class(luxnb)
## [1] "nb"
summary(luxnb)
plot(lux)
plot(luxnb, coords = coordinates(lux), add=T, col=2, lwd=2)
lux
data.frame(lux)
library(spdep)
ww <- nb2listw(nb, style='B') # style is critical for Moran's I -- try other styles
moran.test(lux$AREA, ww)
moran.mc(lux$AREA, ww, nsim=99)
library(spdep)
ww <- nb2listw(luxnb, style='B') # style is critical for Moran's I -- try other styles
moran.test(lux$AREA, ww)
#Monte Carlo simulation is the preferred method (in fact, the only good method).
moran.mc(lux$AREA, ww, nsim=99)
?moran.mc
#Monte Carlo simulation is the preferred method (in fact, the only good method).
x <- moran.mc(lux$AREA, ww, nsim=99)
x$statistic
x$parameter
x$p.value
x$alternative
x$res
x$method
x$data.name
hist(x$res)
?moran
luxwm <- nb2mat(luxnb, style='B')
(luxwm <- nb2mat(luxnb, style='B'))
?aggregate
n <- length(lux)
y <- lux$AREA
ms <- cbind(id = rep(1:n, each = n),
y = rep(y, each = n),
value = as.vector(luxwm * y))
head(ms)
ms <- ms[ms[,3] > 0, ]
head(luxwm)
head(luxwm*y)
head(y)
head(luxwm%*%y)
sum(luxwm[,1] * y)
y*luxwm == luxwm*y
identical(y*luxwm, y*luxwm)
head(luxwm*y)
head(luxwm)
head(y)
length(y)
dim(luxwm)
myvec <- c(1:3)
mymat <- as.matrix(cbind(a = 6:15, b = 16:25, c= 26:35))
head(mymat)
myvec
mymat %*% myvec
mymat * myvec
luxwm[1:3,1:3]
y[1:3]
myvec
mymat
luxwm[1:3,1:3]*y
v <- c(1:3)
m1 <- as.matrix(cbind(a = 6:15, b = 16:25, c= 26:35))
m2 <- as.matrix(cbind(a = 6:8, b = 16:18, c= 26:28))
m1*v
m2*v
m2
m1
m1*1:10
m1*as.vector(1:10)
?`*`
ms <- ms[ms[,3] > 0, ]
head(ms)
#And compute the average neighbour value
ams <- aggregate(ms[,2:3], list(ms[,1]), FUN = mean)
ams
library(tidyverse)
ms %>% group_by(id) %>% summarize(meany=mean(y), meanval = mean(value))
ms %>% group_by(as.factor(id)) %>% summarize(meany=mean(y), meanval = mean(value))
class(ms)
as.data.frame(ms) %>% group_by(as.factor(id)) %>% summarize(meany=mean(y), meanval = mean(value))
as.data.frame(ms) %>% group_by(id) %>% summarize(meany=mean(y), meanval = mean(value))
as.data.frame(ms) %>% group_by(id) %>% summarize(mean(y), mean(value))
libary(data.table)
library(data.table)
ms = as.data.table(ms)
ms[,,by=id, fun = mean]
ms[,,by=id, mean]
ms[,,by=id]
flights[, .(meanx = mean(x), meanval = mean(value)]
ms[, .(meanx = mean(x), meanval = mean(value)]
ms[, .(meanx = mean(x), meanval = mean(value))]
ms[, .(meanx = mean(y), meanval = mean(value))]
ms[, .(meanx = mean(y), meanval = mean(value)), by=id]
ms[, .(mean(y), mean(value)), by=id]
ms
as.data.frame(ms) %>% group_by(id) %>% summarize(mean(y), mean(value))
ms = as.data.table(ms)
ms[, (meany = mean(y), meanvalue = mean(value)), by = id]
ms[, .(meanx = mean(y), meanval = mean(value)), by = id]
#And compute the average neighbour value
ams <- aggregate(ms[,2:3], list(ms[,1]), FUN = mean)
ms <- ms[ms[,3] > 0, ]
ms <- cbind(id = rep(1:n, each = n),
y = rep(y, each = n),
value = as.vector(luxwm * y))
ms <- ms[ms[,3] > 0, ]
#And compute the average neighbour value
ams <- aggregate(ms[,2:3], list(ms[,1]), FUN = mean)
ams
ms <- as.data.frame(ms)
ams <- aggregate(ms[,2:3], list(ms[,1]), FUN = mean)
## dplyr way
# as.data.frame(ms) %>% group_by(id) %>% summarize(mean(y), mean(value))
## data.table way
# ms = as.data.table(ms)
# ms[, .(meanx = mean(y), meanval = mean(value)), by = id]
ams <- ams[,-1]
colnames(ams) <- c('y', 'spatially lagged y')
head(ams)
plot(ams)
reg <- lm(ams[,2] ~ ams[,1])
abline(reg, lwd=2)
abline(h=mean(ams[,2]), lt=2)
abline(v=ybar, lt=2)
y
abline(v=mean(y), lt=2)
reg
luxwm <- nb2mat(luxnb, style='B')
n <- length(lux)
y <- lux$AREA
ms <- cbind(id = rep(1:n, each = n), y = rep(y, each = n),
value = as.vector(luxwm * y))
ms <- ms[ms[,3] > 0, ]
#And compute the average neighbour value
ams <- aggregate(ms[,2:3], list(ms[,1]), FUN = mean)
## dplyr way
# as.data.frame(ms) %>% group_by(id) %>% summarize(mean(y), mean(value))
## data.table way
# ms = as.data.table(ms)
# ms[, .(meanx = mean(y), meanval = mean(value)), by = id]
ams <- ams[,-1]
colnames(ams) <- c('y', 'spatially lagged y')
head(ams)
##    y spatially lagged y
## 1 10           7.666667
## 2  6           7.750000
## 3  4           6.000000
## 4 11           8.000000
## 5  6           6.666667
# Finally, the plot.
plot(ams)
reg <- lm(ams[,2] ~ ams[,1])
abline(reg, lwd=2)
abline(h=mean(ams[,2]), lt=2)
abline(v=mean(y), lt=2)
mean(ams[,2])
mean(y)
coefficients(reg)[2]
Rcpp::cppFunction("NumericMatrix reulermultinom_cpp(int m, double size, NumericVector rate, double dt) {
int ncol = rate.size();
NumericMatrix trans(m, ncol);
double p = sum(rate); //total event rate
for (int i = 0; i < m; i++) {
double tmpp = p;
double tmpsize = R::rbinom(size, (1-exp(-tmpp*dt))); // total number of events
for (int k = 0; k < (ncol-1); k++) {
double tr = R::rbinom(tmpsize, rate(k)/tmpp);
trans(i, k) = tr;
tmpsize = tmpsize - trans(i, k);
tmpp = tmpp - rate(k);
}
trans(i, (ncol-1)) = tmpsize;
}
return(trans);
}")
Now difference in execution speed is negligible.
```{r, warning=F, message=F}
library(microbenchmark)
microbenchmark(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05), reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05))
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05), reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05))
x <- t(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05))
y <- reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05)
xy <- as.data.frame(cbind(x, y))
names(xy) <- c("pomp_var1", "pomp_var2", "var1", "var2")
apply(xy, 2, summary)
library(microbenchmark)
microbenchmark(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05), reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05))
x <- t(pomp::reulermultinom(1e5, 100, rate=c(1,2), dt=0.05))
y <- reulermultinom_cpp(1e5, 100, rate=c(1,2), dt=0.05)
xy <- as.data.frame(cbind(x, y))
names(xy) <- c("pomp_var1", "pomp_var2", "var1", "var2")
apply(xy, 2, summary)
rproc <- cppFunction("
NumericVector rproc(double N, double r, double K, double sigma) {
double eps = R::rnorm(n = 1, mean = 0, sd = sigma)
double X = c(N = r * N * exp(1-N/K + eps))
return(X);
}")
library(Rcpp)
rproc <- cppFunction("
NumericVector rproc(double N, double r, double K, double sigma) {
double eps = R::rnorm(n = 1, mean = 0, sd = sigma)
double X = c(N = r * N * exp(1-N/K + eps))
return(X);
}")
?rnorm
library(Rcpp)
rproc <- cppFunction("
NumericVector rproc(double N, double r, double K, double sigma) {
double eps = R::rnorm(mean = 0, sd = sigma)
double X = c(N = r * N * exp(1-N/K + eps))
return(X);
}")
rproc <- cppFunction("
NumericVector rproc(double N, double r, double K, double sigma) {
double eps = R::rnorm(mean = 0, sd = sigma)
return(eps);
}")
rproc <- cppFunction("
NumericVector rproc(double sigma) {
double eps = R::rnorm(0, sigma)
return(eps);
}")
rproc <- cppFunction("
NumericVector rproc(double sigma) {
double eps = R::rnorm(0, sigma);
return(eps);
}")
rproc(sigma=0.4)
rproc(sigma=0.4)
rproc()
rproc
rproc(sigma = 0.5)
x <- rproc(sigma = 0.5)
x
rproc <- cppFunction("
double rproc(double sigma) {
double eps = R::rnorm(0, sigma);
return(eps);
}")
rproc(sigma = 0.5)
rproc(sigma = 0.5)
rproc <- cppFunction("
double rproc(double N, double K, double r, double sigma) {
double eps = R::rnorm(0, sigma);
double X = c(N = r * N * exp(1-N/K + eps))
return(X);
}")
rproc <- cppFunction("
double rproc(double N, double K, double r, double sigma) {
double eps = R::rnorm(0, sigma);
double X = r * N * exp(1-N/K + eps);
return(X);
}")
rproc(N=100,K=4,r=0.1,sigma = 0.1)
library(Rcpp)
cppFunction("
NumericVector rproc_cpp(double N, double K, double r, double sigma) {
double eps = R::rnorm(0, sigma);
NumericVector X = NumericVector::create(Named("foo" = 0));
X["foo"] = r * N * exp(1-N/K + eps);
return(X);
}")
rproc_cpp(N=100,K=4,r=0.1,sigma = 0.1)
library(Rcpp)
cppFunction("
NumericVector rproc_cpp(double N, double K, double r, double sigma) {
NumericVector X = NumericVector::create(Named("foo" = 0.0));
X["foo"] = 1.0;
return(X);
}")
rproc_cpp(N=100,K=4,r=0.1,sigma = 0.1)
cppFunction("
NumericVector rproc_cpp(double N, double K, double r, double sigma) {
NumericVector X = NumericVector::create(Named('foo'= 0.0));
X['foo'] = 1.0;
return(X);
}")
rproc_cpp(N=100,K=4,r=0.1,sigma = 0.1)
library(Rcpp)
cppFunction("
NumericVector rproc_cpp(double N, double K, double r, double sigma) {
NumericVector X = NumericVector::create(Named("foo"= 0.0));
X["foo"] = 1.0;
return(X);
}")
rproc_cpp(N=100,K=4,r=0.1,sigma = 0.1)
sourceCpp("cpp/named_vector.cpp")
sourceCpp("cpp/named_vector.cpp")
named_vector(x=2)
named_vector(vv=2.2)
library(Rcpp)
cppFunction("
NumericVector named_vector(NumericVector vv) {
NumericVector v =
NumericVector::create(Named("x",1), Named("y")=2 , _["z"]=3);
return v;
}")
library(Rcpp)
cppFunction("
NumericVector named_vector(NumericVector vv) {
NumericVector v =
NumericVector::create(Named("x",1), Named("y")=2 , _["z"]=3);
return v;
}")
library(pomp)
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(
function (N, r, K, sigma, ...) {
eps <- rnorm(n=1,mean=0,sd=sigma)
c(N=r*N*exp(1-N/K+eps))
},
delta.t=1
)
) -> sim1
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(rproc, delta.t=1)
) -> sim1
library(ggplot2)
ggplot(data=as.data.frame(sim1),aes(x=time,y=N))+
geom_line()
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(
function (N, r, K, sigma, ...) {
eps <- rnorm(n=1,mean=0,sd=sigma)
c(N=r*N*exp(1-N/K+eps))
},
delta.t=1
)
) -> sim1
library(ggplot2)
ggplot(data=as.data.frame(sim1),aes(x=time,y=N))+
geom_line()
source("cpp/rproc_cpp.cpp")
library(Rcpp)
source("cpp/rproc_cpp.cpp")
sourceCpp("cpp/rproc_cpp.cpp")
rproc_cpp(N=50, r=1.4, K=100, sigma = 0.1)
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(rproc_cpp, delta.t=1)
) -> sim1
sourceCpp("cpp/rproc_cpp.cpp")
rproc_cpp(N=50, r=1.4, K=100, sigma = 0.1, delta.t = 0)
sourceCpp("cpp/rproc_cpp.cpp")
rproc_cpp(N=50, r=1.4, K=100, sigma = 0.1, delta.t = 0)
sourceCpp("cpp/rproc_cpp.cpp")
rproc_cpp(N=50, r=1.4, K=100, sigma = 0.1, delta_t = 0.1)
rproc_cpp(N=50, r=1.4, K=100, sigma = 0.1, delta_t = 0.01)
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(rproc_cpp, delta.t=1)
) -> sim1
rproc = function (N, r, K, sigma, ...) {
eps <- rnorm(n=1,mean=0,sd=sigma)
c(N=r*N*exp(1-N/K+eps))
}
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(rproc, delta.t=1)
) -> sim1
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(rproc, delta.t=1)
) -> sim1
library(ggplot2)
ggplot(data=as.data.frame(sim1),aes(x=time,y=N))+
geom_line()
sourceCpp("cpp/rproc_cpp.cpp")
rproc_cpp(N=50, r=1.4, K=100, sigma = 0.1)
rproc = function (N, r, K, sigma, ...) {
rproc_cpp(N=N, r=r, K=K, sigma = sigma)
}
simulate(t0=0, times=1:20,
params=c(r=1.2,K=200,sigma=0.1,N_0=50),
rinit=function (N_0, ...) {
c(N=N_0)
},
rprocess=discrete_time(rproc, delta.t=1)
) -> sim1
library(ggplot2)
ggplot(data=as.data.frame(sim1),aes(x=time,y=N))+
geom_line()
microbenchmark(rproc(N=50, r=1.4, K=100, sigma = 0.1),
rproc2(N=50, r=1.4, K=100, sigma = 0.1))
library(microbenchmark)
rproc = function (N, r, K, sigma, ...) {
eps <- rnorm(n=1,mean=0,sd=sigma)
c(N=r*N*exp(1-N/K+eps))
}
rproc2 = function (N, r, K, sigma, ...) {
rproc_cpp(N=N, r=r, K=K, sigma = sigma)
}
library(microbenchmark)
microbenchmark(rproc(N=50, r=1.4, K=100, sigma = 0.1),
rproc2(N=50, r=1.4, K=100, sigma = 0.1))
microbenchmark(rproc(N=50, r=1.4, K=100, sigma = 0.1),
rproc2(N=50, r=1.4, K=100, sigma = 0.1), neval = 1e5)
?microbenchmark
microbenchmark(rproc(N=50, r=1.4, K=100, sigma = 0.1),
rproc2(N=50, r=1.4, K=100, sigma = 0.1), times = 1e5)
library(tidyverse)
read_csv(paste0("https://kingaa.github.io/sbied/stochsim/", "Measles_Consett_1948.csv")) %>%
select(week,reports=cases) -> meas
meas %>% as.data.frame() %>% head()
sir_step <- function (S, I, R, N, Beta, mu_IR, delta.t, ...) {
dN_SI <- rbinom(n=1,size=S,prob=1-exp(-Beta*I/N*delta.t))
dN_IR <- rbinom(n=1,size=I,prob=1-exp(-mu_IR*delta.t))
S <- S - dN_SI
I <- I + dN_SI - dN_IR
R <- R + dN_IR
c(S = S, I = I, R = R)
}
sir_rinit <- function (N, eta, ...) {
c(S = round(N*eta), I = 1, R = round(N*(1-eta)))
}
library(pomp)
meas %>%
pomp(times="week",t0=0,
rprocess=euler(sir_step,delta.t=1/7),
rinit=sir_rinit
) -> measSIR
sir_dmeas <- function (reports, H, rho, log, ...) {
dbinom(x=reports, size=H, prob=rho, log=log)
}
sir_rmeas <- function (H, rho, ...) {
c(reports=rbinom(n=1, size=H, prob=rho))
}
measSIR %>%
pomp(
rmeasure=sir_rmeas,
dmeasure=sir_dmeas
) -> measSIR
measSIR %>%
simulate(
params=c(Beta=7.5,mu_IR=0.5,rho=0.5,eta=0.03,N=38000),
nsim=20,format="data.frame",include.data=TRUE
) -> sims
sims %>%
ggplot(aes(x=week,y=reports,group=.id,color=.id=="data"))+
geom_line()+
guides(color=FALSE)
sir_step <- Csnippet("
double dN_SI = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SI;
I += dN_SI - dN_IR;
R += dN_IR;
H += dN_IR;
")
sir_rinit <- Csnippet("
S = nearbyint(eta*N);
I = 1;
R = nearbyint((1-eta)*N);
H = 0;
")
sir_dmeas <- Csnippet("
lik = dbinom(reports,H,rho,give_log);
")
sir_rmeas <- Csnippet("
reports = rbinom(H,rho);
")
measSIR %>%
pomp(rprocess=euler(sir_step,delta.t=1/7),
rinit=sir_rinit,
rmeasure=sir_rmeas,
dmeasure=sir_dmeas,
accumvars="H",
statenames=c("S","I","R","H"),
paramnames=c("Beta","mu_IR","N","eta","rho")
) -> measSIR
measSIR %>%
simulate(
params=c(Beta=7.5,mu_IR=0.5,rho=0.5,eta=0.03,N=38000),
nsim=20,format="data.frame",include.data=TRUE
) -> sims
sims %>%
ggplot(aes(x=week,y=reports,group=.id,color=.id=="data"))+
geom_line()+
guides(color=FALSE)
